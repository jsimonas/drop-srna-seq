gene_biotype = "pre_miRNA",
transcript_id = ifelse(grepl("MIM", ID), ID, NA),
transcript_biotype = ifelse(!type %in% "gene", "miRNA", NA),
transcript_name = ifelse(grepl("-miR-", Name) | grepl("-let-.*[0-9]p", Name), Name, NA),
exon_id = ifelse(type == "exon", paste0(transcript_id, ".e"), NA)
) %>%
fill(gene_name) %>%
# remove unwanted columns
select(-rowid, -ID:-Derives_from) %>%
# convert back to granges obj
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
gtf_mirbase
# libraries
library(tidyverse)
library(rtracklayer)
# download files
download.file(
url = "https://www.mirbase.org/ftp/CURRENT/genomes/hsa.gff3",
destfile = "../gtfs/database/mirbase/mirbase_v22_hsa.gff3"
)
download.file(
url = "https://mirgenedb.org/gff/hsa?sort=pos&all=1",
destfile = "../gtfs/database/mirgenedb/mirgenedb_v2_hsa.gff3"
)
# read mirbase gff
gff_mirbase <- rtracklayer::import(
"../gtfs/database/mirbase/mirbase_v22_hsa.gff3"
)
# read mirgenedb gff
gff_mirgenedb <- rtracklayer::import(
"../gtfs/database/mirgenedb/mirgenedb_v2_hsa.gff3"
)
##
## re-format mirbase gff annotations to ensembl like .gtf
##
##
## gene level
# tabularise granges obj
gff_mirbase_tb <- gff_mirbase %>%
as_tibble() %>% rowid_to_column()
# make gtf
gtf_mirbase <- gff_mirbase_tb %>%
filter(type == "miRNA_primary_transcript") %>%
# modify duplicated pre-mirna ids and names
mutate(
ID = make.unique(ID, sep = "_"),
Name =  make.unique(Name, sep = "-"),
) %>%
bind_rows(., anti_join(
gff_mirbase_tb,., by = "rowid"
)) %>%
arrange(rowid) %>%
# modify duplicated mature mirna names
mutate(
Name =  make.unique(Name, sep = "_")
) %>%
# add extra row for each mature
mutate(
dumy = if_else(type == "miRNA", 2,1)
) %>%
uncount(dumy) %>%
# assign type
mutate(
Name = make.unique(Name, sep = "x"),
type = case_when(
type == "miRNA_primary_transcript" ~ "gene",
grepl("x1", Name) ~ "exon",
TRUE ~ "transcript"
),
Name = gsub("x1", "", Name)
) %>%
# add missing info
mutate(
source = "mirbase_v22.1",
gene_id = ifelse(grepl("MIM", ID), Derives_from, ID),
gene_name = ifelse(!(grepl("-miR-", Name) | grepl("-let-.*[0-9]p", Name)), Name, NA),
gene_biotype = "pre_miRNA",
transcript_id = ifelse(grepl("MIM", ID), ID, NA),
transcript_biotype = ifelse(!type %in% "gene", "miRNA", NA),
transcript_name = ifelse(grepl("-miR-", Name) | grepl("-let-.*[0-9]p", Name), Name, NA),
exon_id = ifelse(type == "exon", paste0(transcript_id, ".e"), NA)
) %>%
fill(gene_name) %>%
# remove unwanted columns
select(-rowid, -ID:-Derives_from) %>%
# convert back to granges obj
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
# export gtf
rtracklayer::export(
gtf_mirbase, "../gtfs/database/mirbase/mirbase_v22_hsa_gene_level.gtf"
)
##
## mature miRNA level
gtf_mirbase_mat <- gtf_mirbase %>%
as_tibble() %>%
# remove gene rows
filter(!is.na(transcript_id)) %>%
# add row for each mature
mutate(
dumy= ifelse(is.na(exon_id),2,1)
) %>%
uncount(dumy) %>%
# modify gene ids and names
group_by(transcript_id) %>%
mutate(
type = make.unique(type, sep = "x"),
type = case_when(
!grepl("x1", type) & !type=="exon" ~ "gene",
TRUE ~ type
),
type = gsub("x1", "", type),
gene_id = transcript_id,
gene_name = transcript_name,
gene_biotype = "mature_miRNA"
) %>%
mutate(
transcript_id = case_when(
type == "gene" ~ NA_character_,
TRUE ~ paste0(transcript_id, ".t")
),
transcript_name = case_when(
type == "gene" ~ NA_character_,
TRUE ~ paste0(transcript_name, "t")
)
) %>%
ungroup() %>%
# expand mature seq by 3 bases
mutate(
start = start-3,
end = end+3
) %>%
# convert back to granges obj
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
# export gtf
rtracklayer::export(
gtf_mirbase_mat, "../gtfs/database/mirbase/mirbase_v22_hsa_mature_level.gtf"
)
##
## re-format mirgenedb gff annotations to ensembl like .gtf
##
# tabularise granges obj
gff_mirgenedb_tb <- gff_mirgenedb %>%
as_tibble() %>% unnest(Alias)
# make gtf
gtf_mirgenedb <- gff_mirgenedb_tb %>%
# modify duplicated alias from mirbase
mutate(
Alias = make.unique(Alias, sep = ".")
) %>%
# add extra row for each mature
mutate(
dumy = if_else(type == "miRNA", 2,1)
) %>%
uncount(dumy) %>%
# assign type
mutate(
ID = make.unique(ID, sep = "x"),
type = case_when(
type == "pre_miRNA" ~ "gene",
grepl("x1", ID) ~ "exon",
TRUE ~ "transcript"
),
ID = gsub("x1", "", ID)
) %>%
# add missing info
mutate(
source = "mirgenedb_v2.1",
gene_id = ifelse(grepl("MIM", Alias), NA, Alias),
gene_name = ifelse(grepl("_pre", ID), ID, NA),
gene_biotype = "pre_miRNA",
transcript_id = ifelse(grepl("MIM", Alias), Alias, NA),
transcript_biotype = "miRNA",
transcript_name = ifelse(!grepl("_pre", ID), ID, NA),
exon_id = ifelse(type == "exon", paste0(transcript_id, ".e"), NA)
) %>%
fill(c(gene_id, gene_name)) %>%
# remove unwanted columns
select(-ID:-Alias) %>%
# convert back to granges obj
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
# export gtf
rtracklayer::export(
gtf_mirgenedb,
"../gtfs/database/mirgenedb/mirgenedb_v2_hsa_gene_level.gtf"
)
##
## mature miRNA level
gtf_mirgenedb_mat <- gtf_mirgenedb %>%
as_tibble() %>%
# remove gene rows
filter(!is.na(transcript_id)) %>%
# add row for each mature
mutate(
dumy= ifelse(is.na(exon_id),2,1)
) %>%
uncount(dumy) %>%
# modify gene ids and names
group_by(transcript_id) %>%
mutate(
type = make.unique(type, sep = "x"),
type = case_when(
!grepl("x1", type) & !type=="exon" ~ "gene",
TRUE ~ type
),
type = gsub("x1", "", type),
gene_id = transcript_id,
gene_name = transcript_name,
gene_biotype = "mature_miRNA"
) %>%
mutate(
transcript_id = case_when(
type == "gene" ~ NA_character_,
TRUE ~ paste0(transcript_id, ".t")
),
transcript_name = case_when(
type == "gene" ~ NA_character_,
TRUE ~ paste0(transcript_name, "t")
)
) %>%
ungroup() %>%
# expand mature seq by 3 bases
mutate(
start = start-3,
end = end+3
) %>%
# convert back to granges obj
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
# export gtf
rtracklayer::export(
gtf_mirgenedb_mat,
"../gtfs/database/mirgenedb/mirgenedb_v2_hsa_mature_level.gtf"
)
gtf_mirbase <- rtracklayer::import(
"../gtfs/database/mirbase/mirbase_v22_hsa_gene_level.gtf"
)
gtf_dash <- rtracklayer::import(
"../gtfs/database/dashr/dashr_v2_hsa_trf_pirna.gtf"
)
gtf_gencode <- rtracklayer::import(
"../gtfs/database/gencode/gencode_v41_hsa.gtf.gz"
)
gtf_ncbi <- rtracklayer::import(
"../gtfs/database/ncbi/ncbi_v110_rrna.gtf"
)
gtf_ncbi
gtf_mirbase
##
## remove overlapping rRNAs
## from gencode
##
# get unique
gtf_ncbi_rrna_unique <- IRanges::subsetByOverlaps(
gtf_ncbi, gtf_gencode,
invert = TRUE
) %>%
as_tibble()
# get overlaps
gtf_gencode_rrna_overlaps <- IRanges::subsetByOverlaps(
gtf_gencode, gtf_ncbi,
invert = FALSE
)
# remove overlaps from gencode
gtf_gencode_filtered <- IRanges::subsetByOverlaps(
gtf_gencode,
gtf_gencode_rrna_overlaps,
invert = TRUE
)
##
## combine gtfs to a single file
##
# combine and sort
gtf_comprehensive <- c(
gtf_mirbase,
gtf_dash,
gtf_gencode_filtered,
gtf_ncbi
) %>%
sortSeqlevels() %>%
sort()
# export gtf
rtracklayer::export(
gtf_comprehensive,
"../gtfs/database/comprehensive_annotation.gtf"
)
# gzip
R.utils::gzip(
"../gtfs/database/comprehensive_annotation.gtf",
overwrite = TRUE
)
small_biotypes <- c(
"snRNA", "snoRNA", "scaRNA", "pre_miRNA", "miRNA",
"Y_RNA", "siRNA", "vault_RNA", "ribozyme", "misc_RNA",
"piRNA", "scRNA", "sRNA", "rRNA", "rRNA_pseudogene",
"Mt_rRNA", "tRNA", "tRF", "tRF5", "tRF3", "Mt_tRNA"
)
gtf_comprehensive %>%
as_tibble()
small_biotypes <- c(
"snRNA", "snoRNA", "scaRNA", "pre_miRNA", "miRNA",
"Y_RNA", "siRNA", "vault_RNA", "ribozyme", "misc_RNA",
"piRNA", "scRNA", "sRNA", "rRNA", "rRNA_pseudogene",
"Mt_rRNA", "tRNA", "tRF", "tRF5", "tRF3", "Mt_tRNA"
)
btypes_crounds <- gtf_comprehensive %>%
as_tibble() %>%
group_by(gene_biotype) %>%
tally() %>%
dplyr::rename(
biotype = "gene_biotype",
assignation_round = "n"
) %>%
mutate(
assignation_round = case_when(
biotype %in% {{small_biotypes}} ~ "small",
TRUE ~ "long"
)
)
# btypes_crounds.csv
write_csv(
btypes_crounds,
"../gtfs/database/btypes_crounds.csv"
)
gtf_custom <- rtracklayer::import(
"/Users/simonas/Cluster/references/genome/GRCh38_microRNAs/annotations_gtf/Homo_sapiens.GRCh38.custom.gtf"
)
gtf_custom %>%
as_tibble() %>%
group_by(gene_biotype) %>%
tally()
gtf_custom %>%
as_tibble() %>%
group_by(gene_biotype) %>%
tally() %>%
view()
knitr::opts_chunk$set(echo = TRUE)
# libraries
library(Matrix)
library(tidyverse)
library(RColorBrewer)
# work directory
wdir <- "/Users/simonas/Cluster/smallseq/"
# get files
stats.list <- list.files(
path = paste0(wdir, "230104_M02245_0096_000000000-DJGT4_out/21_SMAL_SJ/"),
pattern = "Summary.csv",
recursive = TRUE,
full.names = TRUE
)
# filter genome mappings
stats_gen_comp <- stats.list[grepl("[a-z]/genome_comp", stats.list)]
# name files
names(stats_gen_comp) <- paste0(
str_extract(stats_gen_comp, "21_SMALL_SJ_0[0-9]{1}"),
gsub("_params", "", gsub("^.","-",str_extract(stats_gen_comp, "_[c,e,m].*_params")))
)
# read files
stats_comp_tb <- lapply(
stats_gen_comp, read_csv,
col_names=c("var", "value")
) %>%
bind_rows(.id = "sample")
# make plot
p1 <- stats_comp_tb %>%
filter(grepl("Barcodes|Q30|Reads Mapped|Saturation",var)) %>%
separate(sample, c("sample", "params"), sep = "-") %>%
mutate(
stat = case_when(
grepl("Mapped", var) ~ "Alignment",
TRUE ~ "QC"
),
var = fct_reorder(var, value),
sample = case_when(
grepl("_01", sample) ~ "App_Mg",
grepl("_02", sample) ~ "App_4N_Mg",
grepl("_03", sample) ~ "App_Mn"
)
) %>%
ggplot(aes(x=var, y=value)) +
geom_bar(
aes(fill = value), color = "black",
stat = "identity", width = 0.7
) +
facet_grid(stat+params~sample, scales = "free_y") +
coord_flip() +
scale_fill_gradientn(colours=brewer.pal(7,"YlGn")) +
theme_bw() +
theme(
strip.background = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
panel.border = element_rect(colour = "black", fill=NA, size=1),
) +
guides(
fill=guide_colourbar(
title = "fraction",
title.position="top",
barwidth = 12.5,
barheight = 0.5,
frame.colour = "black",
frame.linewidth = 1
)
) +
ggtitle("mapping stats")
p1
# get files
mtx.list <- list.files(
path = paste0(wdir, "230104_M02245_0096_000000000-DJGT4_out/21_SMAL_SJ/"),
pattern = ".mtx",
recursive = TRUE,
full.names = TRUE
)
# filter genome mappings
mtx_gen_comp <- mtx.list[grepl("[a-z]/genome_comp.*raw", mtx.list)]
# name files
names(mtx_gen_comp) <- paste0(
str_extract(mtx_gen_comp, "21_SMALL_SJ_0[0-9]{1}"),
gsub("_params", "", gsub("^.","-",str_extract(mtx_gen_comp, "_[c,e,m].*_params"))),
ifelse(!grepl("Unique", mtx_gen_comp), "-Unique", "-Mult")
)
# read files
mtx_gen_comp_tb <- lapply(mtx_gen_comp, function(x){
mat <- Matrix::readMM(x)
mat <- round(mat,0)
mat <- Matrix::colSums(mat)
as_tibble(mat) %>%
arrange(desc(value)) %>%
mutate(idx = row_number())
}
) %>%
bind_rows(.id = "sample") %>%
separate(
sample, c("sample", "params", "mapping"), sep = "-"
) %>%
mutate(
sample = case_when(
grepl("_01", sample) ~ "App_Mg",
grepl("_02", sample) ~ "App_4N_Mg",
grepl("_03", sample) ~ "App_Mn"
)
)
p2 <- mtx_gen_comp_tb %>%
ggplot(aes(idx, value)) +
geom_line(size=1, color="#00A087FF") +
scale_x_log10() +
theme_bw() +
scale_y_log10(breaks=c(1, 10, 100, 1000)) +
facet_grid(mapping+params~sample) +
theme(legend.position = "none",
legend.background = element_blank(),
strip.background = element_blank(),
strip.text.y = element_text(angle = 0, hjust = 0),
panel.border = element_rect(colour = "black", fill=NA, size=1),
plot.margin = margin(1,0.1,0.1,0.1, unit = "cm")) +
labs(x="Barcodes", y="UMIs") +
ggtitle("barcode distribution")
p2
# libraries
library(broom)
library(GenomicRanges)
library(rtracklayer)
library(Rsamtools)
library(bamsignals)
# read annotations
gtf_file <- paste0(
"/Users/simonas/Cluster/references/genome/GRCh38_microRNAs/annotations/database/comprehensive_annotation.gtf"
)
gtf <- import(
gtf_file
)
# get genes
genes <- gtf %>%
as_tibble() %>%
filter(
type %in% "gene" & gene_biotype %in% c("rRNA", "protein_coding", "pre_miRNA")
) %>%
makeGRangesFromDataFrame(
keep.extra.columns=TRUE
)
# get BAMs
bam.list <- list.files(
path = paste0(wdir, "230104_M02245_0096_000000000-DJGT4_out/21_SMAL_SJ"),
pattern = ".bam$",
recursive = TRUE, full.names = TRUE
)
# filter genome mappings
bam_gen_comp <- bam.list[grepl("[a-z]/genome_comp", bam.list)]
# name files
names(bam_gen_comp) <- paste0(
str_extract(bam_gen_comp, "21_SMALL_SJ_0[0-9]{1}"),
gsub("_params", "", gsub("^.","-",str_extract(bam_gen_comp, "_[c,e,m].*_params")))
)
# run 'samtools index' command
# calculate coverage
coverage_per_gene <-
lapply(
bam_gen_comp[grepl("mgcount", bam_gen_comp)],
bamCoverage,
genes,
verbose=FALSE
)
saveRDS(coverage_per_gene, "/Users/simonas/smallseq/processed_data/coverage_per_gene.rds")
coverage_per_gene <- readRDS("/Users/simonas/smallseq/processed_data/coverage_per_gene.rds")
